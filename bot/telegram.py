"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Web —á–µ—Ä–µ–∑ undetected-chromedriver
"""

import time
from typing import List, Dict, Optional, Any
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import NoSuchElementException

from config import (
    CHAT_SELECTORS, MESSAGE_SELECTORS, 
    HISTORY_SELECTORS, TELEGRAM_CONFIG, ARCHIVE_SELECTORS, TELEGRAM_SITE_CONFIG
)
from bot.base_handler import BaseSiteHandler
from utils.logger import get_logger

logger = get_logger("undetected_telegram")


class UndetectedTelegramHandler(BaseSiteHandler):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Web —á–µ—Ä–µ–∑ undetected-chromedriver"""
    
    def __init__(self, driver, site_config=None):
        # –ï—Å–ª–∏ site_config –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if site_config is None:
            site_config = TELEGRAM_SITE_CONFIG
        
        super().__init__(driver, site_config)
        self.wait = WebDriverWait(driver, TELEGRAM_CONFIG["wait_for_selector_timeout"] / 1000)
        self._archive_opened = False  # –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        self._element_cache = {}  # –ö—ç—à –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self._cache_timestamp = 0
        self._cache_ttl = 30  # TTL –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def _find_element_cached(self, selectors: List[str], cache_key: str = None) -> Optional[Any]:
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if cache_key and cache_key in self._element_cache:
            element, timestamp = self._element_cache[cache_key]
            if time.time() - timestamp < self._cache_ttl:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∏–¥–∏–º
                    if element and element.is_displayed():
                        return element
                except:
                    # –≠–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                    del self._element_cache[cache_key]
        
        for selector in selectors:
            try:
                element = self.driver.find_element(By.CSS_SELECTOR, selector)
                if element and element.is_displayed():
                    if cache_key:
                        self._element_cache[cache_key] = (element, time.time())
                    return element
            except NoSuchElementException:
                continue
        return None
            
    def _clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        self._element_cache.clear()
        self._cache_timestamp = time.time()
    
    async def get_current_chat_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        try:
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            chat_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
            chat_selectors = [
                ".chat-info .peer-title",
                ".chat-header .peer-title", 
                ".chat-title",
                ".peer-title"
            ]
            
            for selector in chat_selectors:
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if element and element.text:
                        chat_name = element.text.strip()
                        break
                except:
                    continue
            
            return {
                "name": chat_name,
                "url": self.driver.current_url
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")
            return {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç", "url": ""}

    async def send_message(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await self.get_current_chat_info()
            logger.info(f"üí¨ –ß–∞—Ç: {chat_info['name']}")
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
            
            # –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input_element = None
            for selector in MESSAGE_SELECTORS["message_input"]:
                try:
                    input_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if input_element and input_element.is_displayed():
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        break
                except NoSuchElementException:
                    continue
            
            if not input_element:
                logger.error("–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ö–ª–∏–∫–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
            input_element.click()
            time.sleep(0.2)
            
            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è (–¥–ª—è contenteditable)
            self.driver.execute_script("arguments[0].innerHTML = '';", input_element)
            self.driver.execute_script("arguments[0].textContent = '';", input_element)
            time.sleep(0.1)
            
            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            input_element.send_keys(text)
            time.sleep(0.3)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_button = None
            for selector in MESSAGE_SELECTORS["send_button"]:
                try:
                    send_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if send_button and send_button.is_displayed():
                        break
                except NoSuchElementException:
                    continue
            
            if not send_button:
                logger.error("–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ò–ù —Ä–∞–∑
            send_button.click()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –≤–º–µ—Å—Ç–æ JavaScript
            time.sleep(0.5)
            
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        
    async def get_unread_messages(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self.get_archived_chats_with_unread()
    
    async def get_recent_messages(self, max_messages: int = 30) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self.get_recent_messages_simple(max_messages)
    
    async def get_archived_chats_with_unread(self, prioritize_old: bool = True) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)"""
        try:
            logger.info("üîç –ü–æ–∏—Å–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏...")
            
            time.sleep(0.2)
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ (–±—ã—Å—Ç—Ä–µ–µ)
            unread_elements = []
            for unread_badge_selector in ARCHIVE_SELECTORS['unread_badge']:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {unread_badge_selector}")
                try:
                    selector = f"{ARCHIVE_SELECTORS['chat_item'][0]}:has({unread_badge_selector})"
                    logger.info(f"üîç –ü–æ–ª–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")
                    unread_elements.extend(elements)
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {unread_badge_selector}: {e}")
                    continue
        
            if not unread_elements:
                return []
        
            # –£–ë–ò–†–ê–ï–ú –î–£–ë–õ–ò–ö–ê–¢–´ - —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
            unique_elements = []
            seen_elements = set()
            for element in unread_elements:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ (data-peer-id)
                try:
                    peer_id = element.get_attribute('data-peer-id')
                    if peer_id and peer_id not in seen_elements:
                        seen_elements.add(peer_id)
                        unique_elements.append(element)
                except:
                    # –ï—Å–ª–∏ –Ω–µ—Ç data-peer-id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    element_id = f"{element.location['x']}_{element.location['y']}_{element.size['width']}_{element.size['height']}"
                    if element_id not in seen_elements:
                        seen_elements.add(element_id)
                        unique_elements.append(element)
        
            logger.info(f"üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(unique_elements)}")
            
            # –ù–û–í–û–ï: –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤–Ω–∏–∑—É)
            if prioritize_old:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ (—ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω–∏–∑—É = —Å—Ç–∞—Ä—ã–µ)
                unique_elements.sort(key=lambda el: el.location['y'], reverse=True)
                logger.info("üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç–∞—Ä—ã–º –¥–∏–∞–ª–æ–≥–∞–º")
            else:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ (—ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤–µ—Ä—Ö—É = –Ω–æ–≤—ã–µ)
                unique_elements.sort(key=lambda el: el.location['y'])
                logger.info("üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤—ã–º –¥–∏–∞–ª–æ–≥–∞–º")
        
            unread_chats = []
            
            for element in unique_elements:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —á–∞—Ç–∞
                    name_element = element.find_element(By.CSS_SELECTOR, ARCHIVE_SELECTORS["chat_name"][0])
                    chat_name = name_element.text.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥–ª—É—à–µ–Ω –ª–∏ —á–∞—Ç
                    class_name = element.get_attribute("class") or ""
                    is_muted = "is-muted" in class_name
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
                    unread_count = 0
                    for badge_selector in ARCHIVE_SELECTORS["unread_badge"]:
                        try:
                            unread_element = element.find_element(By.CSS_SELECTOR, badge_selector)
                            unread_text = unread_element.text.strip()
                            
                            # –ï—Å–ª–∏ badge –Ω–∞–π–¥–µ–Ω –∏ –≤–∏–¥–∏–º, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                            if unread_element.is_displayed():
                                unread_count = 1
                                break
                        except:
                            continue
                    
                    if unread_count > 0:
                        unread_chats.append({
                            "name": chat_name,
                            "unread_count": unread_count,
                            "is_muted": is_muted
                        })
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏: {chat_name} ({unread_count}) [muted: {is_muted}]")
                    
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞: {e}")
                    continue
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unread_chats)} –∞—Ä—Ö–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏")
            return unread_chats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
            return []
        
    async def select_chat_by_name(self, chat_name: str) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –ø–æ –∏–º–µ–Ω–∏ (–∑–∞–Ω–æ–≤–æ –Ω–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç)"""
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞: {chat_name}")
            
            # –ò—â–µ–º —á–∞—Ç –ø–æ –∏–º–µ–Ω–∏
            chat_selector = ARCHIVE_SELECTORS["chat_item"][0]
            chat_elements = self.driver.find_elements(By.CSS_SELECTOR, chat_selector)
            
            for element in chat_elements:
                try:
                    name_element = element.find_element(By.CSS_SELECTOR, ARCHIVE_SELECTORS["chat_name"][0])
                    if name_element.text.strip() == chat_name:
                        element.click()
                        time.sleep(2)
                        logger.info(f"‚úÖ –ß–∞—Ç '{chat_name}' –æ—Ç–∫—Ä—ã—Ç")
                        return True
                except:
                    continue
            
            logger.error(f"‚ùå –ß–∞—Ç '{chat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ '{chat_name}': {e}")
            return False
    
    async def open_archive_folder(self) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∞—Ä—Ö–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if self._archive_opened:
                logger.info("üìÅ –ê—Ä—Ö–∏–≤ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return True
            
            logger.info("üìÅ –û—Ç–∫—Ä—ã—Ç–∏–µ –∞—Ä—Ö–∏–≤–∞ —á–∞—Ç–æ–≤...")
            
            # –®–∞–≥ 1: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –º–µ–Ω—é
            menu_button = self._find_element_cached(ARCHIVE_SELECTORS["menu_button"], "menu_button")
            if not menu_button:
                logger.warning("–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∏–¥–Ω–∞")
                return False
            
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
            menu_button.click()
            time.sleep(0.3)
            
            # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –ø—É–Ω–∫—Ç–∞ "Archived Chats" –≤ –º–µ–Ω—é
            try:
                menu_items = self.driver.find_elements(By.CSS_SELECTOR, ARCHIVE_SELECTORS["archived_chats_item"][0])
                archived_item = None
                
                for item in menu_items:
                    try:
                        text = item.text
                        if "Archived Chats" in text or "–ê—Ä—Ö–∏–≤–Ω—ã–µ —á–∞—Ç—ã" in text:
                            archived_item = item
                            break
                    except:
                        continue
                
                if archived_item:
                    archived_item.click()
                    logger.info("‚úÖ –ü—É–Ω–∫—Ç 'Archived Chats' –Ω–∞–∂–∞—Ç")
                    time.sleep(0.5)
                    self._archive_opened = True
                    return True
                else:
                    logger.warning("–ü—É–Ω–∫—Ç 'Archived Chats' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω—é")
                    return False
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É–Ω–∫—Ç–∞ –∞—Ä—Ö–∏–≤–∞: {e}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
            return False
            
    async def get_unread_messages_in_current_chat(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (–Ω–µ –≤—Å–µ –ø–æ–¥—Ä—è–¥)"""
        try:
            logger.info("–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            messages_container = self._find_element_cached(HISTORY_SELECTORS["message_container"], "messages_container")
            
            if not messages_container:
                logger.warning("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
    
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_elements = messages_container.find_elements(By.CSS_SELECTOR, HISTORY_SELECTORS["message_item"][0])
            
            if not message_elements:
                logger.warning("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –≤—Å–µ –ø–æ–¥—Ä—è–¥)
            incoming_messages = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ü–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
            for element in reversed(message_elements):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–º
                    is_outgoing = "is-out" in (element.get_attribute("class") or "")
                    is_incoming = "is-in" in (element.get_attribute("class") or "")
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–µ, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç
                    if is_incoming and not is_outgoing:
                        text = ""
                        try:
                            text_element = element.find_element(By.CSS_SELECTOR, HISTORY_SELECTORS["message_text"][0])
                            if text_element:
                                text = text_element.text.strip()
                        except NoSuchElementException:
                            pass
                        
                        if text:
                            incoming_messages.append({
                                'text': text,
                                'is_outgoing': False,
                                'element': element
                            })
                            
                            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
                            if len(incoming_messages) >= 3:
                                break
                
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue
            
            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            incoming_messages.reverse()
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(incoming_messages)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return incoming_messages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def get_recent_messages_simple(self, max_messages: int = 30) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            messages_container = None
            container_selectors = [
                ".scrollable.scrollable-y",
                ".bubbles",
                ".bubbles-inner"
            ]
            
            for selector in container_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed():
                            messages_inside = element.find_elements(By.CSS_SELECTOR, ".bubble[data-mid]")
                            if messages_inside:
                                messages_container = element
                                break
                    if messages_container:
                        break
                except:
                    continue
            
            if not messages_container:
                logger.warning("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
            
            # –£–º–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            initial_messages = self.driver.find_elements(By.CSS_SELECTOR, ".bubble[data-mid]")
            current_count = len(initial_messages)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
            max_scroll_attempts = 10
            scroll_attempt = 0
            no_new_messages_count = 0
            
            while current_count < max_messages and scroll_attempt < max_scroll_attempts and no_new_messages_count < 3:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                    current_scroll_top = self.driver.execute_script("return arguments[0].scrollTop;", messages_container)
                    container_height = self.driver.execute_script("return arguments[0].clientHeight;", messages_container)
                    
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö –Ω–∞ 80% –≤—ã—Å–æ—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    new_scroll_top = current_scroll_top - (container_height * 0.8)
                    self.driver.execute_script("arguments[0].scrollTop = arguments[1];", messages_container, new_scroll_top)
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                    wait_time = 0
                    while wait_time < 3:
                        try:
                            bubbles_inner = self.driver.find_element(By.CSS_SELECTOR, ".bubbles-inner")
                            if "is-scrolling" not in bubbles_inner.get_attribute("class"):
                                break
                        except:
                            pass
                        time.sleep(0.2)
                        wait_time += 0.2
                    
                    time.sleep(0.5)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    new_messages = self.driver.find_elements(By.CSS_SELECTOR, ".bubble[data-mid]")
                    new_count = len(new_messages)
                    
                    final_scroll_top = self.driver.execute_script("return arguments[0].scrollTop;", messages_container)
                    
                    if new_count > current_count:
                        current_count = new_count
                        no_new_messages_count = 0
                    elif final_scroll_top >= current_scroll_top - 10:
                        no_new_messages_count += 1
                        if no_new_messages_count >= 3:
                            break
                    
                    scroll_attempt += 1
                        
                except Exception as e:
                    break
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
            self.driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight;", messages_container)
            time.sleep(0.3)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_elements = self.driver.find_elements(By.CSS_SELECTOR, ".bubble[data-mid]")
            
            if not message_elements:
                logger.warning("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            recent_elements = message_elements[-max_messages:] if len(message_elements) > max_messages else message_elements
            messages = []
            
            # JavaScript –∫–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            js_extract_script = """
            var messages = [];
            var elements = arguments[0];
            
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                var class_name = element.className || '';
                var data_mid = element.getAttribute('data-mid') || '';
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (class_name.includes('is-date') || class_name.includes('service')) {
                    continue;
                }
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                var is_outgoing = class_name.includes('is-out');
                
                // –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Ü–∏—Ç–∞—Ç—ã)
                var text = '';
                var messageType = 'text';
                
                // –ò—â–µ–º .translatable-message, –Ω–æ –ù–ï –≤ .reply
                var messageElement = element.querySelector('.message');
                if (messageElement) {
                    // –ò—â–µ–º .translatable-message –≤–Ω—É—Ç—Ä–∏ .message, –Ω–æ –ù–ï –≤ .reply
                    var translatableElement = messageElement.querySelector('.translatable-message:not(.reply .translatable-message)');
                    if (translatableElement && translatableElement.textContent && translatableElement.textContent.trim()) {
                        text = translatableElement.textContent.trim();
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç .translatable-message, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç .message, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º .reply –∏ .time
                        var clonedElement = messageElement.cloneNode(true);
                        var replyElements = clonedElement.querySelectorAll('.reply');
                        for (var k = 0; k < replyElements.length; k++) {
                            replyElements[k].remove();
                        }
                        
                        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                        var timeElements = clonedElement.querySelectorAll('.time');
                        for (var k = 0; k < timeElements.length; k++) {
                            timeElements[k].remove();
                        }
                        
                        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ü–∏—Ç–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
                        text = clonedElement.textContent.trim();
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è
                if (!text) {
                    var bubbleContent = element.querySelector('.bubble-content');
                    if (bubbleContent) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
                        if (bubbleContent.querySelector('.media-sticker-wrapper')) {
                            text = '[–°–¢–ò–ö–ï–†]';
                            messageType = 'sticker';
                        } else if (bubbleContent.querySelector('.media-photo')) {
                            text = '[–§–û–¢–û]';
                            messageType = 'photo';
                        } else if (bubbleContent.querySelector('.media-video')) {
                            text = '[–í–ò–î–ï–û]';
                            messageType = 'video';
                        } else if (bubbleContent.querySelector('audio-element')) {
                            text = '[–ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï]';
                            messageType = 'voice';
                        } else if (bubbleContent.querySelector('.attachment')) {
                            text = '[–ú–ï–î–ò–ê]';
                            messageType = 'media';
                        }
                    }
                }
                
                // –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                if (text) {
                    text = text.replace(/\s+/g, ' ').trim();
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                if (text) {
                    messages.push({
                        text: text,
                        is_outgoing: is_outgoing,
                        data_mid: data_mid,
                        class_name: class_name,
                        message_type: messageType
                    });
                }
            }
            
            return messages;
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            extracted_messages = self.driver.execute_script(js_extract_script, recent_elements)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            for msg_data in extracted_messages:
                messages.append({
                    'text': msg_data['text'],
                    'is_outgoing': msg_data['is_outgoing'],
                    'data_mid': msg_data['data_mid'],
                    'class_name': msg_data['class_name'],
                    'message_type': msg_data['message_type']
                })
            
            # –°–û–†–¢–ò–†–û–í–ö–ê –ò –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            outgoing_messages = [msg for msg in messages if msg['is_outgoing']]
            incoming_messages = [msg for msg in messages if not msg['is_outgoing']]
            
            # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            return messages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def exit_current_chat(self) -> bool:
        """–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
        try:
            logger.info("–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞...")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞—Ä—Ö–∏–≤–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            self._archive_opened = False
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞
            self._clear_cache()
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –Ω–∞–∂–∏–º–∞–µ–º Escape –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
            from selenium.webdriver.common.keys import Keys
            self.driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
            
            time.sleep(0.3)  # –ñ–¥–µ–º –≤—ã—Ö–æ–¥–∞
            
            logger.info("‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞: {e}")
            return False

